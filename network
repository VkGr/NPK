import numpy
import matplotlib.pyplot
import scipy.special
class neuralNetwork:
  def __init__(self,inputnodes, hiddenodes, outputnodes, learning):
    self.inodes=inputnodes
    self.hnodes=hiddenodes
    self.onodes=outputnodes
    self.learning=learning
    self.wih=numpy.random.normal(0.0, pow(self.hnodes, -0.5),(self.hnodes,self.inodes))
    self.who=numpy.random.normal(0.0, pow(self.onodes, -0.5),(self.onodes,self.hnodes))
    self.activation=lambda x: scipy.special.expit(x)
    pass
  def train(self, inputs_list, targets_list):
    inputs=numpy.array(inputs_list, ndmin=2).T
    targets= numpy.array(targets_list, ndmin=2).T
    hidden_input=numpy.dot(self.wih, inputs)
    hidden_outputs=self.activation(hidden_input)
    final_inputs=numpy.dot(self.who, hidden_outputs)
    final_outputs=self.activation(final_inputs)
    output_error=targets-final_outputs
    hidden_errors=numpy.dot(self.who.T, output_error)
    self.who+=self.learning*numpy.dot((output_error*final_outputs*(1.0-final_outputs)), numpy.transpose(hidden_outputs))
    self.wih+=self.learning*numpy.dot((hidden_errors*hidden_outputs*(1.0-hidden_outputs)), numpy.transpose(inputs))
    pass
  def query(self, inputs_list):
        inputs=numpy.array(inputs_list, ndmin=2).T
        hidden_inputs= numpy.dot(self.wih, inputs)
        hidden_outputs=self.activation(hidden_inputs)
        final_inputs=numpy.dot(self.who,hidden_outputs).T
        final_outputs=self.activation(final_inputs)
        return final_outputs
digital=0
data_file=open('mnist_train.csv','r')
data_list=data_file.readlines()
data_file.close()
NetWork=neuralNetwork(784,100,10,0.3)
while digital!=len(data_list):
    value=data_list[digital].split(',')
    scaled=(numpy.asfarray(value[1:])/255.0*0.99)+0.01
    onodes=10
    targets=numpy.zeros(onodes)+0.01
    targets[int(value[0])]=0.99
    train_object=NetWork.train(scaled,targets)
    digital+=1
data_file_two=open('mnist_test.csv','r')
data_list_two=data_file_two.readlines()
data_file_two.close()
digital=0
while digital!=len(data_list_two):
    value_two=data_list_two[digital].split(',')
    scaled_two=(numpy.asfarray(value_two[1:])/255.0*0.99)+0.01
    test_object=NetWork.query(scaled_two)
    print(value_two[0])
    digital+=1
    print(test_object*0.1)
